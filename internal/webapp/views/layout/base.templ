package layout

templ Base(){
<html>
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <title>KingsComp</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <link href="https://css.gg/css" rel="stylesheet"/>
    <link rel="stylesheet" href="/static/fontiran.css?v=0.0.0-debug"/>
    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            direction: rtl;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        i {
            float: right;
            margin-left: 4px;
        }

        .gg-loadbar {
            padding-top: 8px;
        }

        body {
            --bg-color: var(--tg-theme-bg-color);
            background-color: var(--bg-color);
            font-family: Ravi FaNum, serif;
            color: var(--tg-theme-text-color);
            margin: 48px 24px;
            padding: 0;
            color-scheme: var(--tg-color-scheme);
        }

        a, button, p, div, h1, h2, h3, h4, h5, h6, b, strong, em {
            font-family: Ravi FaNum, serif;
        }

        a {
            color: var(--tg-theme-link-color);
        }

        .spinner {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: radial-gradient(farthest-side, var(--tg-theme-button-color) 94%, #0000) top/9px 9px no-repeat,
            conic-gradient(#0000 30%, var(--tg-theme-button-color));
            -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 9px), #000 0);
            animation: spinner-aib1d7 1s infinite linear;
        }

        .hint {
            color: var(--tg-theme-hint-color);
        }

        @keyframes spinner-aib1d7 {
            to {
                transform: rotate(360deg);
            }
        }

        .center {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .tg-button {
            padding: 12px;
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
            border: none;
            outline: none;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            border-radius: 8px;
            transition: .15s;
        }
        .tg-button.answered {
            background: var(--tg-theme-button-text-color);
            color: var(--tg-theme-button-color) ;
            opacity: 0.4;
        }

        [x-cloak] {
            display: none !important;
        }

        .time-indicator {
            -webkit-mask: linear-gradient(270deg, rgba(0, 0, 0, 1), transparent 80%);
            height: 10px;
            width: 80px;
            background: var(--tg-theme-button-color);
            color: var(--tg-theme-button-text-color);
            -webkit-text-stroke: 2px var(--tg-theme-button-color);
            transition: 0.2s;
        }

        .anim-fade-in {
            animation: fadeInScale 0.4s cubic-bezier(0, 0.55, 0.45, 1) 0s 1 normal forwards;
        }

        @keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(1.4);
            }

            100% {
                opacity: 1;
                transform: scale(1);
            }
        }

        .time-indicator-holder {
            width: 100%;
            border: 2px var(--tg-theme-button-color) solid;
            height: 14px;
            direction: ltr !important;
            overflow: hidden;
            position: relative;
            border-radius: 4px;
        }

        .time-indicator-text {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translateX(-50%) translateY(-50%);
            color: var(--tg-theme-hint-color);
            font-size: 16px;
            font-weight: bold;
        }

        .box-with-border {
            border: 1px var(--tg-theme-hint-color) solid;
            border-radius: 4px;
            width: 100%;
            color: var(--tg-theme-text-color);
            padding: 5px 10px;
        }

        .flex-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .tg-button-bordered {
            color: var(--tg-theme-text-color);
            border: 2px var(--tg-theme-text-color) solid;
            outline: none;
            background: transparent;
            padding: 5px 10px;
            border-radius: 4px;
        }
    </style>
</head>
<body x-data="{
    theme: window.Telegram.WebApp.themeParams,
    auth: 0, // 0 means validating, 1 means validate, 2 means invalid,
    authError: ''
}"
      x-init='
        let response = await post("/auth/validate")

        if (!response["data"]["is_valid"]) {
            auth = 2;
            return
        }

        auth = 1;
        WebApp.ready();
        WebApp.expand();
        WebApp.enableClosingConfirmation();
'>

<template x-if="auth === 0">
    <div class="center">
        <div>
            <div class="spinner"></div>
        </div>
        <p class="hint">لطفا کمی صبر کنید</p>
    </div>
</template>

<template x-if="auth === 1" x-transition x-cloak>
    { children... }
</template>

<template x-if="auth === 2" x-cloak>
    <div class="center">
        <h2>مشکلی پیش آمده :(</h2>
        <p>لطفا دوباره تلاش کنید یا به پشتیبانی اطلاع دهید</p>
    </div>
</template>

<script>
    const WebApp = window.Telegram.WebApp;

    async function post(path, data = {}) {
        let response = await fetch(path, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": WebApp.initData,
            },
            body: JSON.stringify(data)
        })

        response = await response.json()
        return response
    }
</script>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store('lobby', {
            isInit: false,
            lobbyId: "",
            currentLobby: {},
            currentPlayer: {},
            lobbyHash: "",
            questionTimer: 0,
            timerPercent: 0,
            questionDuration: 0,
            lastQuestionAnswered:-1,

            async initLobby() {
                if (this.isInit) {
                    return
                }

                let response = await post('/lobby/' + this.lobbyId + '/ready')
                if (response['code'] !== 200) {
                    alert(response['data']);
                    WebApp.close()
                }

                this.currentPlayer = response["data"];

                response = await post('/lobby/' + this.lobbyId + '/info')
                if (response['code'] !== 200) {
                    alert(response['data']);
                    WebApp.close()
                }

                this.currentLobby = response['data'];
                this.runEventWorker()
                this.questionTimerWorker()
                this.isInit = true
            },
            setLobbyId(lobbyId) {
                this.lobbyId = lobbyId
            },
            async runEventWorker() {
                while (true) {
                    let response = await this.readEvents()
                    if (!response["ok"]) {
                        alert(response["data"])
                        return
                    }
                    this.currentLobby = response["data"]["lobby"];
                    this.lobbyHash = response["data"]["hash"];
                    if (this.currentLobby['state'] === 'ended') {
                        return
                    }
                }
            },
            async readEvents() {
                return await post('/lobby/' + this.lobbyId + '/events', {
                    hash: this.lobbyHash,
                })
            },
            async answered(answer) {
                console.log("sending ...")
                let currentQuestion = this.currentLobby.gameInfo.currentQuestion.index
                await post("/lobby/" + this.lobbyId + "/answer", {
                    index: currentQuestion,
                    answer: answer,
                })
                this.lastQuestionAnswered = currentQuestion
            },
            questionTimerWorker() {
                setInterval(() => {
                    let duration = this.currentLobby.gameInfo.questionEndsAt - this.currentLobby.gameInfo.questionStartedAt
                    if (duration === 0) {
                        return
                    }
                    let currentUnix = (new Date() / 1000)
                    let newPercent = Math.floor((currentUnix - this.currentLobby.gameInfo.questionStartedAt) / duration * 100)
                    if (newPercent >= 100)
                        newPercent = 100
                    this.timerPercent = newPercent
                }, 300)
            }
        })
    })
</script>
</body>
</html>
}